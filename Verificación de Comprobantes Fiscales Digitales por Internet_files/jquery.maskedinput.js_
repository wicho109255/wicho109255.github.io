/*
Masked Input plugin for jQuery
Copyright (c) 2007-2009 Josh Bush (digitalbush.com)
Licensed under the MIPL (Microsoft Public License)
Version: 1.2.2 (03/09/2009 22:39:06)
==================================================
Modified by: Axay�catl Valenzuela Faddul
Date: 2011-05
Description:    1) "paste" event modified in order to set caret on mask's last position.
2) "blur" event unbinded.
3) Setting caret on last match position when "focus" event occurs.
4) Allow deletion of selected partial text.
==================================================
Modified by: Miguel A. Palizada
Date: 2011-06
Description:    1) Supress clear mask method when lost focus or escape key pressed.
2) Allow pasting for unformated text.
3) Fix edition to prevent autocomplete behavior.
4) Block edition when text completed.
5) Hexadecimal charset definition added.
==================================================
Modified by: Cristobal Espinosa Villase�or
Date: 2012-03-19
Description:   
1) Se agregu una funci�n para limpiar el contenido de una mascara
*/

(function ($) {
    function getPasteEvent() {
        var el = document.createElement('input'),
            name = 'onpaste';
        el.setAttribute(name, '');
        return (typeof el[name] === 'function') ? 'paste' : 'input';
    }

    var pasteEventName = getPasteEvent() + ".mask";
    var iPhone = (window.orientation != undefined);
    var isPaste = false;

    $.mask = {
        //Predefined character definitions
        definitions: {
            '9': "[0-9]",
            'a': "[A-Za-z]",
            '*': "[A-Za-z0-9]",
            'h': "[A-Fa-f0-9]"
        },
        dataName: "rawMaskFn"
    };

    $.fn.extend({
        //Helper Function for Caret positioning
        caret: function (begin, end) {
            if (this.length == 0)
                return;
            if (typeof begin == 'number') {
                end = (typeof end == 'number') ? end : begin;
                return this.each(function () {
                    if (this.setSelectionRange) {
                        this.setSelectionRange(begin, end);
                    }
                    else if (this.createTextRange) {
                        var range = this.createTextRange();
                        range.collapse(true);
                        range.moveEnd('character', end);
                        range.moveStart('character', begin);
                        range.select();
                    }
                });
            }
            else {
                if (this[0].setSelectionRange) {
                    begin = this[0].selectionStart;
                    end = this[0].selectionEnd;
                }
                else if (document.selection && document.selection.createRange) {
                    var range = document.selection.createRange();
                    begin = 0 - range.duplicate().moveStart('character', -100000);
                    end = begin + range.text.length;
                }
                return { begin: begin, end: end };
            }
        },
        unmask: function () {
            return this.trigger("unmask");
        },
        mask: function (mask, settings) {
            if (!mask && this.length > 0) {
                var input = $(this[0]);
                return input.data($.mask.dataName)();
            }
            settings = $.extend({
                placeholder: "_",
                completed: null
            }, settings);

            var defs = $.mask.definitions;
            var tests = [];
            var partialPosition = mask.length;
            var firstNonMaskPos = null;
            var len = mask.length;
            var rawLen = 0;
            var pasteRange = null;

            $.each(mask.split(""), function (i, c) {
                if (c == '?') {
                    len--;
                    partialPosition = i;
                }
                else if (defs[c]) {
                    tests.push(new RegExp(defs[c]));
                    if (firstNonMaskPos == null)
                        firstNonMaskPos = tests.length - 1;
                }
                else {
                    tests.push(null);
                }
            });

            for (var indexLen = 0; indexLen < len; indexLen++) {
                if (tests[indexLen]) {
                    rawLen++;
                }
            }

            return this.trigger("unmask").each(function () {
                var input = $(this);
                var buffer = $.map(mask.split(""), function (c, i) { if (c != '?') return defs[c] ? settings.placeholder : c });
                var focusText = input.val();

                function seekNext(pos) {
                    while (++pos <= len && !tests[pos]);
                    return pos;
                };

                function seekPrev(pos) {
                    while (--pos >= 0 && !tests[pos]);
                    return pos;
                };

                function shiftL(begin, end) {
                    if (begin < 0)
                        return;
                    for (var i = begin, j = seekNext(end) ; i < len; i++) {
                        if (tests[i]) {
                            if (j < len && tests[i].test(buffer[j])) {
                                buffer[i] = buffer[j];
                                buffer[j] = settings.placeholder;
                            }
                            else
                                break;
                            j = seekNext(j);
                        }
                    }
                    writeBuffer();
                    input.caret(Math.max(firstNonMaskPos, begin));
                };

                function shiftR(pos) {
                    for (var i = pos, c = settings.placeholder; i < len; i++) {
                        if (tests[i]) {
                            var j = seekNext(i);
                            var t = buffer[i];
                            buffer[i] = c;
                            if (j < len && tests[j].test(t))
                                c = t;
                            else
                                break;
                        }
                    }
                };

                function keydownEvent(e) {
                    var k = e.which;

                    //backspace, delete, and escape get special treatment
                    if (k == 8 || k == 46 || (iPhone && k == 127)) {
                        var pos = input.caret(),
							begin = pos.begin,
							end = pos.end;

                        if (end - begin == 0) {
                            begin = k != 46 ? seekPrev(begin) : (end = seekNext(begin - 1));
                            end = k == 46 ? seekNext(end) : end;
                        }

                        clearBuffer(begin, end);
                        shiftL(begin, end - 1);

                        return false;
                    }
                        //escape
                    else if (k == 27) {
                        return false;
                    }
                        //arrows, tab and special keys
                    else if ((k < 33 || k > 40) && k != 9 && k != 45) {
                        var rawValue = getRawValue(input.val());
                        if ((rawValue.length >= rawLen) &&
                            (!document.selection ||
                            (document.selection && document.selection.createRange && document.selection.createRange().text.length == 0))) {
                            return false;
                        }
                    }
                };

                function keypressEvent(e) {
                    var k = e.which,
						pos = input.caret();
                    if (e.ctrlKey || e.altKey || e.metaKey || k < 32) {//Ignore
                        return true;
                    }
                    else if (k) {
                        if (pos.end - pos.begin != 0) {
                            clearBuffer(pos.begin, pos.end);
                            shiftL(pos.begin, pos.end - 1);
                        }

                        var p = seekNext(pos.begin - 1);
                        if (p < len) {
                            var c = String.fromCharCode(k);
                            if (tests[p].test(c)) {
                                shiftR(p);
                                buffer[p] = c;
                                writeBuffer();
                                var next = seekNext(p);
                                input.caret(next);
                                if (settings.completed && next >= len)
                                    settings.completed.call(input);
                            }
                        }
                        return false;
                    }
                };

                function pasteEvent(e) {
                    var pastedBegin = 0;
                    var pastedEnd = 0;
                    if (document.selection && document.selection.createRange) {
                        var pastedRange = document.selection.createRange();
                        pastedBegin = 0 - pastedRange.duplicate().moveStart('character', -100000);
                        pastedEnd = pastedBegin + pastedRange.text.length;
                    }

                    isPaste = true;
                    setTimeout(function () {
                        if (pastedEnd == 0) {
                            pasted = checkVal(true);
                        }
                        else {
                            checkVal(true);
                        }

                        input.caret(pastedEnd);
                    }, 0);
                }

                function clearBuffer(start, end) {
                    for (var i = start; i < end && i < len; i++) {
                        if (tests[i])
                            buffer[i] = settings.placeholder;
                    }
                };

                function writeBuffer() {
                    return input.val(buffer.join('')).val();
                };

                function getRawValue(test) {
                    if (test.length > 0) {
                        var inputValue = test.split("");
                        var rawBuffer = [];

                        for (var index = 0, position = 0; index < inputValue.length; index++) {
                            var c = test.charAt(index);
                            if (tests[index] && tests[index].test(c)) {
                                rawBuffer[position] = inputValue[position];
                                position++;
                            }
                        }

                        return rawBuffer.join('');
                    }
                    else {
                        return "";
                    }
                };

                function checkVal(allow) {
                    //try to place characters where they belong
                    var test = input.val();

                    var lastMatch = -1;
                    for (var i = 0, pos = 0; i < len; i++) {
                        if (tests[i]) {
                            buffer[i] = settings.placeholder;
                            while (pos++ < test.length) {
                                var c = test.charAt(pos - 1);
                                if (tests[i].test(c) && (isPaste || ((pos - 1) == i))) {
                                    buffer[i] = c;
                                    lastMatch = i;
                                    break;
                                }
                            }
                            if (pos > test.length)
                                break;
                        }
                        else if (buffer[i] == test.charAt(pos) && i != partialPosition) {
                            pos++;
                            lastMatch = i;
                        }
                    }

                    if (!allow && lastMatch + 1 < partialPosition) {
                        input.val("");
                        clearBuffer(0, len);
                    }
                    else if (allow || lastMatch + 1 >= partialPosition) {
                        writeBuffer();
                        if (!allow)
                            input.val(input.val().substring(0, lastMatch + 1));
                    }

                    isPaste = false;

                    return (partialPosition ? i : firstNonMaskPos);
                };

                input.data($.mask.dataName, function () {
                    return $.map(buffer, function (c, i) {
                        return tests[i] && c != settings.placeholder ? c : null;
                    }).join('');
                })

                if (!input.attr("readonly"))
                    input
					.one("unmask", function () {
					    input
							.unbind(".mask")
							.removeData($.mask.dataName);
					})
					.bind("focus.mask", function () {
					    focusText = input.val();
					    pos = checkVal(focusText.length > 0);
					    writeBuffer();

					    var moveCaret = function () {
					        if (pos == mask.length)
					            input.caret(0, pos);
					        else if (pos == 0)
					            input.caret(pos, len);
					        else
					            input.caret(pos);
					    };

					    var el = document.createElement('input'),
                            name = 'onpaste';
					    el.setAttribute(name, '');

					    ((typeof el[name] === 'function') ? moveCaret : function () { setTimeout(moveCaret, 0) })();

					})
                	.bind("keydown.mask", keydownEvent)
                	.bind("keypress.mask", keypressEvent)
                	.bind(pasteEventName, pasteEvent);

                checkVal(); //Perform initial check for existing values
            });
        }
    });
})(jQuery);

//Borra el contenido de un campo que se utiliza para introducir el Uuid
function limpiarMascara(id) {
    $(document.getElementById(id)).val('');
}